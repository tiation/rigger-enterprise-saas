version: '3.8'

services:
  # ==========================
  # DATABASE SERVICES
  # ==========================
  postgres:
    image: postgres:15-alpine
    container_name: rigger_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rigger_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rigger_password}
      POSTGRES_DB: ${POSTGRES_DB:-rigger_enterprise}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - rigger_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rigger_user}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================
  # CACHE & QUEUE SERVICES  
  # ==========================
  redis:
    image: redis:7-alpine
    container_name: rigger_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rigger_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================
  # APPLICATION SERVICES
  # ==========================
  marketing-site:
    build:
      context: .
      dockerfile: apps/rigger-connect/marketing/Dockerfile
    container_name: rigger_marketing
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${API_BASE_URL:-http://localhost:3004}
    depends_on:
      - postgres
      - redis
    networks:
      - rigger_network
    volumes:
      - ./apps/rigger-connect/marketing:/app
      - /app/node_modules
      - /app/.next

  business-portal:
    build:
      context: .
      dockerfile: apps/rigger-connect/business-portal/Dockerfile
    container_name: rigger_business_portal
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_API_URL=${API_BASE_URL:-http://localhost:3004}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    volumes:
      - ./apps/rigger-connect/business-portal:/app
      - /app/node_modules
      - /app/.next

  worker-intranet:
    build:
      context: .
      dockerfile: apps/rigger-hub/worker-intranet/Dockerfile
    container_name: rigger_worker_intranet
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_API_URL=${API_BASE_URL:-http://localhost:3004}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    volumes:
      - ./apps/rigger-hub/worker-intranet:/app
      - /app/node_modules
      - /app/.next

  automation-engine:
    build:
      context: .
      dockerfile: apps/automation-engine/Dockerfile
    container_name: rigger_automation_engine
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    volumes:
      - ./apps/automation-engine:/app
      - /app/node_modules
      - ./logs:/app/logs

  # ==========================
  # API GATEWAY
  # ==========================
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: rigger_api_gateway
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - CORS_ORIGINS=${ALLOWED_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    volumes:
      - ./apps/api-gateway:/app
      - /app/node_modules

  # ==========================
  # MONITORING & OBSERVABILITY
  # ==========================
  nginx:
    image: nginx:alpine
    container_name: rigger_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/docker/nginx/sites:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - marketing-site
      - business-portal
      - worker-intranet
      - api-gateway
    networks:
      - rigger_network

# ==========================
# NETWORKS & VOLUMES
# ==========================
networks:
  rigger_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local