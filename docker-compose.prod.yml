version: '3.8'

services:
  # ==========================
  # DATABASE SERVICES
  # ==========================
  postgres:
    image: postgres:15-alpine
    container_name: rigger_postgres_prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - rigger_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: rigger_redis_prod
    restart: always
    volumes:
      - redis_prod_data:/data
      - ./infrastructure/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - rigger_network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================
  # APPLICATION SERVICES
  # ==========================
  marketing-site:
    build:
      context: .
      dockerfile: apps/rigger-connect/marketing/Dockerfile.prod
      target: production
    container_name: rigger_marketing_prod
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_BASE_URL}
      - NEXT_PUBLIC_BUSINESS_PORTAL_URL=${BUSINESS_PORTAL_URL}
      - NEXT_PUBLIC_WORKER_PORTAL_URL=${WORKER_PORTAL_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  business-portal:
    build:
      context: .
      dockerfile: apps/rigger-connect/business-portal/Dockerfile.prod
      target: production
    container_name: rigger_business_portal_prod
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_API_URL=${API_BASE_URL}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  worker-intranet:
    build:
      context: .
      dockerfile: apps/rigger-hub/worker-intranet/Dockerfile.prod
      target: production
    container_name: rigger_worker_intranet_prod
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_API_URL=${API_BASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  automation-engine:
    build:
      context: .
      dockerfile: apps/automation-engine/Dockerfile.prod
      target: production
    container_name: rigger_automation_engine_prod
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    volumes:
      - ./logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile.prod
      target: production
    container_name: rigger_api_gateway_prod
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - CORS_ORIGINS=${ALLOWED_ORIGINS}
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_WINDOW_MS=900000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================
  # REVERSE PROXY & SSL
  # ==========================
  nginx:
    image: nginx:alpine
    container_name: rigger_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/docker/nginx/sites-prod:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - marketing-site
      - business-portal
      - worker-intranet
      - api-gateway
    networks:
      - rigger_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================
  # MONITORING & OBSERVABILITY
  # ==========================
  prometheus:
    image: prom/prometheus:latest
    container_name: rigger_prometheus
    restart: always
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rigger_network

  grafana:
    image: grafana/grafana:latest
    container_name: rigger_grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - rigger_network

# ==========================
# NETWORKS & VOLUMES
# ==========================
networks:
  rigger_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local